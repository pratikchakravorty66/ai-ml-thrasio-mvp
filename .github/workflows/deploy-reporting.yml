name: Deploy Weekly Reporting Automation

on:
  push:
    branches: [ main ]
    paths:
      - 'app/weekly_reporting.py'
      - 'app/reporting_pipeline.py'
      - 'app/cloud_function.py'
      - 'infrastructure/deploy_reporting.sh'
      - '.github/workflows/deploy-reporting.yml'
  workflow_dispatch:  # Allow manual triggering

env:
  PYTHON_VERSION: '3.13'
  POETRY_VERSION: '1.8.0'

jobs:
  deploy-reporting-automation:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: ${{ env.POETRY_VERSION }}
        
    - name: Install dependencies
      run: |
        poetry install
        poetry run pip install kfp google-cloud-aiplatform
        
    - name: Authenticate to Google Cloud
      uses: google-github-actions/auth@v2
      with:
        credentials_json: ${{ secrets.GCP_SERVICE_ACCOUNT_KEY }}
        project_id: ${{ secrets.GCP_PROJECT_ID }}
        
    - name: Set up Cloud SDK
      uses: google-github-actions/setup-gcloud@v1
      
    - name: Compile reporting pipeline
      run: |
        export PYTHONPATH=$PYTHONPATH:.
        cd app
        poetry run python reporting_pipeline.py
        ls -la *.json
        
    - name: Deploy reporting automation
      run: |
        chmod +x infrastructure/deploy_reporting.sh
        ./infrastructure/deploy_reporting.sh
      env:
        GCP_PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
        GCP_REGION: ${{ secrets.GCP_REGION }}
        
    - name: Upload pipeline artifacts
      uses: actions/upload-artifact@v4
      with:
        name: reporting-pipeline-definition
        path: app/reporting_pipeline.json
        retention-days: 30
        
    - name: Test reporting function (optional)
      run: |
        # Get the function URL and test it
        FUNCTION_URL=$(gcloud functions describe weekly-ml-report-trigger --region=${{ secrets.GCP_REGION }} --project=${{ secrets.GCP_PROJECT_ID }} --format="value(httpsTrigger.url)")
        echo "Testing function at: $FUNCTION_URL"
        # curl -X GET $FUNCTION_URL  # Uncomment to test
      continue-on-error: true